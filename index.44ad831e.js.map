{"mappings":"CAuFA,eAAeA,EAAAC,UAAAC,OAAA,QAAA,IAAAD,UAAA,GAAaA,UAAA,GAAD,EAAGE,EAAAF,UAAAC,OAAA,QAAA,IAAAD,UAAA,GAAYA,UAAA,GAAF,GAAIG,EAAAH,UAAAC,OAAA,QAAA,IAAAD,UAAA,GAAQA,UAAA,GAAD,EACjDI,QAAQC,IAAK,eAAsCC,OAAxBP,EAAU,gBAAiCO,OAAnBJ,EAAQ,aAAgBI,OAALH,IAEtE,IAAK,IAAII,EAAIR,EAAWQ,GAAKL,EAASK,GAAKJ,EACzCC,QAAQC,IAAIE,GAIhBC,CAAM,EAAG","sources":["src/index.js"],"sourcesContent":["// const clients = [\"Mango\", \"Poly\", \"Ajax\"];\n\n// Указывая в скобках индекс элемента мы получаем его значение\n// console.log(clients[0]); // Mango\n// console.log(clients[1]); // Poly\n// console.log(clients[2]); // Ajax\n\n// clients[0] = \"Kiwi\";\n// clients[1] = \"Pango\";\n// console.log(clients); // [\"Kiwi\", \"Pango\", \"Ajax\"]\n\n// for (let i = 0; i < clients.length; i += 1) {\n//   console.log(clients[i]);\n// }\n\n// const clients = [\"Mango\", \"Ajax\", \"Poly\"];\n\n// for (const client of clients) {\n//   console.log(client);\n// }\n\n// const string = \"javascript\";\n\n// for (const character of string) {\n//   console.log(character);\n// }\n\n// const clients = [\"Mango\", \"Poly\", \"Ajax\"];\n// const clientNameToFind = \"Ajax\";\n// let message;\n\n// for (const client of clients) {\n//   // На каждой итерации будем проверять совпадает ли элемент массива с\n//   // именем клиента. Если совпадает то мы записываем в message сообщение\n//   // об успехе и делаем break чтобы не искать дальше\n//   if (client === clientNameToFind) {\n//     message = \"Клиент с таким именем есть в базе данных!\";\n//     break;\n//   }\n\n//   // Если они не совпадают то запишем в message сообщение об отсутствии имени\n//   message = \"Клиента с таким именем нету в базе данных!\";\n// }\n\n// console.log(message); // \"Клиент с таким именем есть в базе данных!\"\n\n// const numbers = [1, 3, 14, 18, 4, 7, 29, 6, 34];\n// const threshold = 15;\n\n// // Для чисел меньше чем порог срабатывает continue, выполнение тела прекращается\n// // и управление передаётся на следующую итерацию.\n// for (let i = 0; i < numbers.length; i += 1) {\n//   if (numbers[i] < threshold) {\n//     continue;\n//   }\n\n//   console.log(`Число больше чем ${threshold}: ${numbers[i]}`); // 18, 29, 34\n// }\n\n// const name = \"Mango\";\n// console.log(name.split(\"\")); // [\"M\", \"a\", \"n\", \"g\", \"o\"]\n\n// function count(countFrom = 0, countTo = 10, step = 1) {\n//   console.log(`countFrom = ${countFrom}, countTo = ${countTo}, step = ${step}`);\n\n//   for (let i = countFrom; i <= countTo; i += step) {\n//     console.log(i);\n//   }\n// }\n\n// count(1, 5); // countFrom = 1, countTo = 5, step = 1\n// count(2); // countFrom = 2, countTo = 10, step = 1\n// count(); // countFrom = 0, countTo = 10, step = 1\n\n// function multiply(x, y, z) {\n//   console.log(`Результат умножения равен ${x * y * z}`);\n// }\n\n// console.log(\"Лог до вызова функции multiply\");\n// multiply(2, 3, 5); // Результат умножения равен 30\n// console.log(\"Лог после вызова функции multiply\");\n\n// Последовательность логов в консоли\n// \"Лог до вызова функции multiply\"\n// \"Результат умножения равен 30\"\n// \"Лог после вызова функции multiply\"\n\nfunction count(countFrom = 0, countTo = 10, step = 1) {\n  console.log(`countFrom = ${countFrom}, countTo = ${countTo}, step = ${step}`);\n\n  for (let i = countFrom; i <= countTo; i += step) {\n    console.log(i);\n  }\n}\n\ncount(1, 5); // countFrom = 1, countTo = 5, step = 1\n// count(2); // countFrom = 2, countTo = 10, step = 1\n// count(); // countFrom = 0, countTo = 10, step = 1"],"names":["countFrom","arguments","length","countTo","step","console","log","concat","i","$b8f9b7833fa37166$var$count"],"version":3,"file":"index.44ad831e.js.map"}